/*
    Generated by Entice Designer
    Entice Designer written by Christopher E. Miller
    www.dprogramming.com/entice.php
*/

private import dfl.all;
import std.stdio;
import std.conv;
import gl.gl;
import gl.glu;
import gl.glut;
import glcontrol;

class GameLoop: Timer{
  private GLControl glc;
  this (uint fps, GLControl glc){
    this.glc = glc;
    this.interval = 1000/fps;
  }
    
  override void onTick(EventArgs ea){
    glc.invalidate();
  }
}

class MyGLControl : GLControl{
  protected float angley_ = 0.00f;
  protected float anglex_ = 0.00f;

  this(){
  }

  protected:
    override void onResize(EventArgs ea){
      makeCurrent();
      glViewport(0, 0, bounds.width, bounds.height);
      writef("After glviewport: %s\n",to!string(glGetError()));
      glEnable(GL_BLEND);
      glEnable(GL_TEXTURE_2D);
      glEnable(GL_MULTISAMPLE);
      glEnable(GL_POLYGON_SMOOTH);
      writef("After Enables: %s\n",to!string(glGetError()));
      glHint(GL_POLYGON_SMOOTH_HINT, GL_NICEST);
      glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);
      glMatrixMode(GL_PROJECTION);
      writef("After glMatrixMode PERSP: %s %X\n",to!string(glGetError()),GL_PROJECTION);
      glLoadIdentity(); //reset projection matrix
      writef("After LoadIdentity: %s\n",to!string(glGetError()));
      gluPerspective(cast(GLfloat)54.0f, cast(GLfloat) bounds.width / cast(GLfloat) bounds.height, cast(GLfloat)1.0f, cast(GLfloat)1000.0f);
      writef("After gluPerspective: %s\n",to!string(glGetError()));
      glMatrixMode(GL_MODELVIEW); //set modelview matrix
      writef("After glMatrixMode MODEL: %s\n",to!string(glGetError()));
      glLoadIdentity(); //reset modelview matrix
      writef("After load ID %s\n",to!string(glGetError()));
      invalidate();
    }

    override void initGL() {
      glClearColor(1.0f,1.0f,0.3f,0.0f);
    }

    override void render(){
      makeCurrent();
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
      glLoadIdentity();
      //writef("After clear & ident %s\n",to!string(glGetError()));
      anglex_ += 2.11;
      angley_ += 4.;
      if (anglex_>360.0) anglex_ -= 360.0f;
      if (angley_>360.0) angley_ -= 360.0f;

      glTranslatef(0.0f, 0.0f, -6.0f);
      //writef("After translate %s\n",to!string(glGetError()));
      glRotatef(angley_, 0.0f,1.0f,0.0f);
      glRotatef(anglex_, 0.1f,0.0f,0.0f);
      //writef("After rotate %s\n",to!string(glGetError()));
      glBegin(GL_TRIANGLES);
        glColor3f(0.2,0.5,1.0); glVertex3f( 0.0f, 1.0f, 0.0f);      // Top
        glColor3f(1.0,0.2,0.5); glVertex3f(-1.0f,-1.0f, 0.0f);      // Bottom Left
        glColor3f(0.5,1.0,0.2); glVertex3f( 1.0f,-1.0f, 0.0f);      // Bottom Right
      glEnd();                                                    // Finished Drawing
      //writef("After triangles %s\n",to!string(glGetError()));
      swapBuffers();
      //writef("Executed opengltest.render() %s\n",to!string(glGetError()));
      stdout.flush();
    }
}

class opengltest: dfl.form.Form
{
    // Do not modify or move this block of variables.
    //~Entice Designer variables begin here.
    MyGLControl glcontrol;
    dfl.panel.Panel ctrlPanel;
    dfl.button.Button exitButton;
    //~Entice Designer variables end here.
    
    GameLoop gameloop;
    
    this(){
      createMenu();
      initializeOpengltest();
      // Other opengltest initialization code here.
      gameloop = new GameLoop(120, glcontrol);
      gameloop.start();
      exitButton.click ~= &fileExitClick;
    }
    
    protected void createMenu(){
      this.menu = new MainMenu;
        
      auto mmenu = new MenuItem;
      mmenu.text = "&File";
      this.menu.menuItems.add(mmenu);
        
      auto mi = new MenuItem;
      mi.text = "E&xit";
      mi.click ~= &fileExitClick;
      mmenu.menuItems.add(mi);
    }

    
    private void initializeOpengltest(){
        // Do not manually modify this function.
        //~Entice Designer 0.8.3 code begins here.
        //~DFL Form
        text = "opengltest";
        clientSize = dfl.all.Size(504, 365);
        //~DFL dfl.panel.Panel=ctrlPanel
        ctrlPanel = new dfl.panel.Panel();
        ctrlPanel.name = "ctrlPanel";
        ctrlPanel.dock = dfl.all.DockStyle.LEFT;
        ctrlPanel.borderStyle = dfl.all.BorderStyle.FIXED_SINGLE;
        ctrlPanel.bounds = dfl.all.Rect(0, 0, 100, 365);
        ctrlPanel.parent = this;
        //~DFL dfl.button.Button=exitButton
        exitButton = new dfl.button.Button();
        exitButton.name = "exitButton";
        exitButton.dock = dfl.all.DockStyle.TOP;
        exitButton.text = "E&xit";
        exitButton.bounds = dfl.all.Rect(0, 0, 98, 23);
        exitButton.parent = ctrlPanel;
        //~DFL GlControl:dfl.label.Label=glcontrol
        glcontrol = new MyGLControl();
        glcontrol.name = "glcontrol";
        glcontrol.dock = dfl.all.DockStyle.FILL;
        glcontrol.bounds = dfl.all.Rect(100, 0, 404, 365);
        glcontrol.parent = this;
        //~Entice Designer 0.8.3 code ends here.
    }

  void fileExitClick(Object sender, EventArgs ea){
    Application.exitThread();
  }

  protected:
}


int main(){
  int result = 0;
  try{
    Application.run(new opengltest());
  }catch(Throwable o){
    msgBox(o.toString(), "Fatal Error", MsgBoxButtons.OK, MsgBoxIcon.ERROR);
    result = 1;
  }
  return result;
}
